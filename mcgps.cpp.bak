#include "mcgps.h"
#include <stdlib.h>
#include <stdio.h>
#include <QProcess>
#include <QList>
#include <QString>
#include <QDebug>

extern MCSerial SerialPrint;
extern char buff_print[];


#define SYNC_CHR1 0xB5
#define SYNC_CHR2 0x62

#define SYNC_CHR1 0xB5
#define SYNC_CHR2 0x62
#define PDOP_POS	18
#define PACC_POS	22
#define STATIC_HOLD_THR_POS 26
#define GPS_MODE_POS	4
// define pacchetto binario
////////////////////////////
#define GPS_SIRF_START  0xA0
#define GPS_SIRF_B0     0xB0
#define GPS_SIRF_B3     0xB3
// define pacchetti attesi come risposta
#define VERSION         0x06
#define PARAM			   0x13
// OFFSET
#define PAYLOAD_OFFSET           5
#define CLASS_OFFSET             2
#define ID_OFFSET                3
#define OFFSET_PAYLOAD			 6

#define CLASS_AID		0x0b
#define ID_ALPSRV		0x32


#define HWMON_ASTATUS_OFFSET     20
#define HWMON_APOWER_OFFSET      21
#define HWMON_NOISEPERMS_OFFSET  16
#define VERMON_SW_OFFSET         0
#define VERMON_HW_OFFSET         30
#define PCK_CLASS_MON	0x0A
#define PCK_ID_HW		   0x09
#define PCK_ID_VER		0x04



enum GPSRXHWSTATES {
   GPSRXHW_INIT = 0,
   GPSRXHW_IS_OFF,
   GPSRXHW_REQ_ON,
   GPSRXHW_WAIT_ON,
   GPSRXHW_INIT_PARAM,
   GPSRXHW_REQ_OFF,
   GPSRXHW_WAIT_OFF,
   GPSRXHW_ON,
   GPSRXHW_WAIT_FOR_INIT
};



/* Private macro -------------------------------------------------------------*/
#define GPS_NUM_RETRY_MUX_OPEN 3


quint8 UBX_CFG_MSG_E_GGA[] = {0x06, 0x01, 0x06, 0x00, 0xF0, 0x00, 0x00, 0x01, 0x00, 0x00};
quint8 UBX_CFG_MSG_D_GGA[] = {0x06, 0x01, 0x06, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00};
// GLL
quint8 UBX_CFG_MSG_E_GLL[] = {0x06, 0x01, 0x06, 0x00, 0xF0, 0x01, 0x00, 0x02, 0x00, 0x00};
quint8 UBX_CFG_MSG_D_GLL[] = {0x06, 0x01, 0x06, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00};
// GSA
quint8 UBX_CFG_MSG_E_GSA[] = {0x06, 0x01, 0x06, 0x00, 0xF0, 0x02, 0x00, 0x04, 0x00, 0x00};
quint8 UBX_CFG_MSG_D_GSA[] = {0x06, 0x01, 0x06, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00};
// GSV
quint8 UBX_CFG_MSG_E_GSV[] = {0x06, 0x01, 0x06, 0x00, 0xF0, 0x03, 0x00, 0x04, 0x00, 0x00};
quint8 UBX_CFG_MSG_D_GSV[] = {0x06, 0x01, 0x06, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00};
// RMC
quint8 UBX_CFG_MSG_E_RMC[] = {0x06, 0x01, 0x06, 0x00, 0xF0, 0x04, 0x00, 0x01, 0x00, 0x00};
quint8 UBX_CFG_MSG_D_RMC[] = {0x06, 0x01, 0x06, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x00, 0x00};
// VTG
quint8 UBX_CFG_MSG_E_VTG[] = {0x06, 0x01, 0x06, 0x00, 0xF0, 0x05, 0x00, 0x02, 0x00, 0x00};
quint8 UBX_CFG_MSG_D_VTG[] = {0x06, 0x01, 0x06, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00};
// GRS
quint8 UBX_CFG_MSG_E_GRS[] = {0x06, 0x01, 0x06, 0x00, 0xF0, 0x06, 0x00, 0x02, 0x00, 0x00};
quint8 UBX_CFG_MSG_D_GRS[] = {0x06, 0x01, 0x06, 0x00, 0xF0, 0x06, 0x00, 0x00, 0x00, 0x00};
// GST
quint8 UBX_CFG_MSG_E_GST[] = {0x06, 0x01, 0x06, 0x00, 0xF0, 0x07, 0x00, 0x02, 0x00, 0x00};
quint8 UBX_CFG_MSG_D_GST[] = {0x06, 0x01, 0x06, 0x00, 0xF0, 0x07, 0x00, 0x00, 0x00, 0x00};
// ZDA
quint8 UBX_CFG_MSG_E_ZDA[] = {0x06, 0x01, 0x06, 0x00, 0xF0, 0x08, 0x00, 0x02, 0x00, 0x00};
quint8 UBX_CFG_MSG_D_ZDA[] = {0x06, 0x01, 0x06, 0x00, 0xF0, 0x08, 0x00, 0x00, 0x00, 0x00};
// GBS
quint8 UBX_CFG_MSG_E_GBS[] = {0x06, 0x01, 0x06, 0x00, 0xF0, 0x09, 0x00, 0x02, 0x00, 0x00};
quint8 UBX_CFG_MSG_D_GBS[] = {0x06, 0x01, 0x06, 0x00, 0xF0, 0x09, 0x00, 0x00, 0x00, 0x00};

// Pacchetto MON_VER
// Legge la versione
quint8 MON_VER[] = {0x0A,0x04,0x00,0x00};

// Pacchetto MON_HW
quint8 MON_HW[] = {0x0A,0x09,0x00,0x00};

quint8 UBX_CFG_NMEA[] = {0x06,0x17,0x04,0x00,0x00,0x23,0x00,0x02};
quint8 UBX_CFG_ITFM[] = {0x06,0x39,0x08,0x00,0xF3,0xAC,0x62,0xAD,0x1E,0x6B,0x00,0x00};


// RESET
quint8 UBX_CFG_MSG_RST_WAR[] ={0x06, 0x04, 0x04, 0x00, 0x01, 0x00, 0x02, 0x00};
quint8 UBX_CFG_MSG_RST_MC[] ={0x06, 0x04, 0x04, 0x00, 0xED, 0xFE, 0x02, 0x00};
quint8 CFG_RST[] = {0x06,0x04,0x04,0x00,0xff,0xff,0x00,0x00};





//Pacchetto UBX_CFG_NAV5
quint8 UBX_CFG_NAV5[] = { 0x06, 0x24,
                           0x24, 0x00,    // lunghezza
                           0xFF, 0xFF,    // mask
                           0x04,          // dynModel
                           0x03,          // fixMode

                           0x00, 0x00, 0x00, 0x00,
                           0x10, 0x27, 0x00, 0x00,
                           0x05,
                           0x00,
                           0xFA, 0x00,
                                         0xFA, 0x00,
                           0x64, 0x00,
                           0x2C, 0x01,
                           0x00,             //Static hold threshold
                           0x00,
                           0x00, 0x00, 0x00, 0x00,
                           0x00, 0x00, 0x00, 0x00,
                           0x00, 0x00, 0x00, 0x00,

                         };


// Pacchetto UBX_CFG_RXM
quint8 UBX_CFG_RXM[]	   = {0x06, 0x11, 0x02, 0x00, 0x02, 0x00};

// Pacchetto UBX_CFG_INF
// Messaggio INF solo su UART1 su protocollo NMEA
// Messaggi abilitati : ERROR WARNING NOTICE USER
quint8 UBX_CFG_INF[]	  = {0x06, 0x02, 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xE7, 0x00, 0x00};
//uint8_t UBX_CFG_MSG_E_ALP[] = {0x06, 0x01, 0x08, 0x00, 0x0B, 0x32, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00};
//uint8_t UBX_CFG_MSG_D_ALP[] = {0x06, 0x01, 0x08, 0x00, 0x0B, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

quint8 UBX_zzzz[] = {0x06, 0x01, 0x08, 0x00, 0x01, 0x30, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00};

//const char UBX_CFG_MSG_E_AID_ALM[] = {0x06, 0x01, 0x08, 0x00, 0x0B, 0x30, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00};
quint8 UBX_CFG_SAVE[]	  = {0x06, 0x09, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,0x01};

quint8 UBX_CFG_ANT[]      = {0x06, 0x13, 0x04, 0x00, 0x1b, 0x00, 0x8b, 0x29};

quint8 UBX_CFG_SBAS_DISABLE[]={0x06, 0x16, 0x08, 0x00, 0x00, 0x03, 0x03, 0x00, 0xD5, 0xCA, 0x06, 0x00};
quint8 UBX_CFG_SBAS_ENABLE_EGNOS[]={0x06, 0x16, 0x08, 0x00, 0x01, 0x03, 0x03, 0x00, 0x51, 0x08, 0x00, 0x00};

quint8 UBX_CFG_NAVX5_ASSISTNOW_AUT_ENABLE[]={0x06, 0x23, 0x28, 0x00, 0x00, 0x00, 0x4C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
quint8 UBX_CFG_NAVX5_ASSISTNOW_AUT_DISABLE[] ={0x06, 0x23, 0x28, 0x00, 0x00, 0x00, 0x4C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };







MCGps::MCGps(QObject* parent)
    :QObject(parent)
{

    connect(&GpsT, SIGNAL(timeout()), this, SLOT(GestioneGps()));
    count = 0;
    input_index=0;
    GpsState=GPSRXHW_INIT;
    myserial.Init(MCSERIAL_ID_SERIAL_GPS);
    myserial.Open(MCSERIAL_ID_SERIAL_GPS);
}

void MCGps::Init(TimerMan *t)
{
    pREGTIMER=t;

    GpsTimer.Init("GpsTimer");
    pREGTIMER->RegisterTimer(&GpsTimer);

    GpsState=GPSRXHW_INIT;

}

void MCGps::Start(int time)
{
    GpsT.setInterval(time);
    GpsT.start();
    count = 0;
}


void MCGps::GestioneGps()
{


    char c;
    char *p;


   // myserial.SendChar('a');


    while(myserial.GetChar(&c))
    {
        if(input_index<MAX_LEN_BUFFER_GPSRX_NMEA-1)
        {
            buffer[input_index++]=c;
            buffer[input_index]=0;
        }
    }

    if(input_index>0)
    {
        if(NewLine())
        {
            snprintf(&buff_print[0],MAX_LEN_BUFFER_PRINT,"%s",buffer);
            SerialPrint.Flush(PRINT_DEBUG_GPS);
            // printf("bufferGps=%s",buffer);
         }


        input_index=0;
        buffer[input_index]=0;
    }



    switch(GpsState)
    {
        case GPS_INIT:
           // GpsNotification();

        break;


        default:
        break;
    }





}



bool MCGps::NewLine()
{
  if (strstr(buffer,"\r\n"))return(true);
  else return(false);
}



void GPSRecActivateExtended(void)
{
}
void GPSRecDeactivateExtended(void)
{
}

void SendUBXSequence(quint8 *pChars, quint8 bLength)
{
}

quint8 GpsRxHwGetChar(char *c)
{
    return(true);
}

quint8 UBXVerCheckSumPacket(quint8 *pPack)
{
    return(true);

}

quint8 UBXReadPacket(quint8 *pPack)
{
    return(true);

}

void UBXCnfParamSet(void)
{

}





